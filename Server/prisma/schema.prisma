// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String      @id @default(uuid())
  userName  String
  email     String      @unique
  birthday  String
  password  String
  coverUrl  String
  bio       String
  pdp       String
  posts     Post[]
  questions Question[]
  favorites Favorites[]
  followers Followers[]
  basket    Basket[]
}

model Brand {
  id        String      @id @default(uuid())
  brandName String
  email     String      @unique
  password  String
  imageUrl  String
  coverUrl  String
  products  Product[]
  followers Followers[]
}

model Product {
  id          String  @id @default(uuid())
  productName String
  price       Int
  likes       Int
  category    String
  imageUrl    String
  new         Boolean @default(true)
  brandId     String

  Brand     Brand       @relation(fields: [brandId], references: [id])
  favorites Favorites[]
  basket    Basket[]
}

model Post {
  id       String @id @default(uuid())
  content  String
  imageUrl String
  userId   String
  User     User   @relation(fields: [userId], references: [id])
}

model Question {
  id      String @id @default(uuid())
  content String
  userId  String

  User User @relation(fields: [userId], references: [id])
}

model Favorites {
  id        String  @id @default(uuid())
  userId    String
  User      User    @relation(fields: [userId], references: [id])
  productId String
  Product   Product @relation(fields: [productId], references: [id])
}

model Followers {
  id      String @id @default(uuid())
  brandId String
  Brand   Brand  @relation(fields: [brandId], references: [id])
  userId  String
  User    User   @relation(fields: [userId], references: [id])
}

model Basket {
  id        String  @id @default(uuid())
  userId    String
  Product   Product @relation(fields: [productId], references: [id])
  productId String
  User      User    @relation(fields: [userId], references: [id])
}



// -- This script was generated by the ERD tool in pgAdmin 4.
// -- Please log an issue at https://redmine.postgresql.org/projects/pgadmin4/issues/new if you find any bugs, including reproduction steps.
// BEGIN;


// CREATE TABLE IF NOT EXISTS public."Favorites"
// (

//     CONSTRAINT "Favorites_pkey" PRIMARY KEY (id)
// );

// CREATE TABLE IF NOT EXISTS public."Product"
// (

//     CONSTRAINT "Product_pkey" PRIMARY KEY (id)
// );

// CREATE TABLE IF NOT EXISTS public."Brand"
// (

//     CONSTRAINT "Brand_pkey" PRIMARY KEY (id)
// );

// CREATE TABLE IF NOT EXISTS public."Followers"
// (

//     CONSTRAINT "Followers_pkey" PRIMARY KEY (id)
// );

// CREATE TABLE IF NOT EXISTS public."User"
// (

//     CONSTRAINT "User_pkey" PRIMARY KEY (id)
// );

// CREATE TABLE IF NOT EXISTS public."Post"
// (

//     CONSTRAINT "Post_pkey" PRIMARY KEY (id)
// );

// CREATE TABLE IF NOT EXISTS public."Question"
// (

//     CONSTRAINT "Question_pkey" PRIMARY KEY (id)
// );

// CREATE TABLE IF NOT EXISTS public."Basket"
// (

//     CONSTRAINT "Basket_pkey" PRIMARY KEY (id)
// );

// ALTER TABLE IF EXISTS public."Favorites"
//     ADD CONSTRAINT "Favorites_productId_fkey" FOREIGN KEY ("productId")
//     REFERENCES public."Product" (id) MATCH SIMPLE
//     ON UPDATE CASCADE
//     ON DELETE RESTRICT;


// ALTER TABLE IF EXISTS public."Favorites"
//     ADD CONSTRAINT "Favorites_userId_fkey" FOREIGN KEY ("userId")
//     REFERENCES public."User" (id) MATCH SIMPLE
//     ON UPDATE CASCADE
//     ON DELETE RESTRICT;


// ALTER TABLE IF EXISTS public."Product"
//     ADD CONSTRAINT "Product_brandId_fkey" FOREIGN KEY ("brandId")
//     REFERENCES public."Brand" (id) MATCH SIMPLE
//     ON UPDATE CASCADE
//     ON DELETE RESTRICT;


// ALTER TABLE IF EXISTS public."Followers"
//     ADD CONSTRAINT "Followers_brandId_fkey" FOREIGN KEY ("brandId")
//     REFERENCES public."Brand" (id) MATCH SIMPLE
//     ON UPDATE CASCADE
//     ON DELETE RESTRICT;


// ALTER TABLE IF EXISTS public."Followers"
//     ADD CONSTRAINT "Followers_userId_fkey" FOREIGN KEY ("userId")
//     REFERENCES public."User" (id) MATCH SIMPLE
//     ON UPDATE CASCADE
//     ON DELETE RESTRICT;


// ALTER TABLE IF EXISTS public."Post"
//     ADD CONSTRAINT "Post_userId_fkey" FOREIGN KEY ("userId")
//     REFERENCES public."User" (id) MATCH SIMPLE
//     ON UPDATE CASCADE
//     ON DELETE RESTRICT;


// ALTER TABLE IF EXISTS public."Question"
//     ADD CONSTRAINT "Question_userId_fkey" FOREIGN KEY ("userId")
//     REFERENCES public."User" (id) MATCH SIMPLE
//     ON UPDATE CASCADE
//     ON DELETE RESTRICT;


// ALTER TABLE IF EXISTS public."Basket"
//     ADD CONSTRAINT "Basket_productId_fkey" FOREIGN KEY ("productId")
//     REFERENCES public."Product" (id) MATCH SIMPLE
//     ON UPDATE CASCADE
//     ON DELETE RESTRICT;


// ALTER TABLE IF EXISTS public."Basket"
//     ADD CONSTRAINT "Basket_userId_fkey" FOREIGN KEY ("userId")
//     REFERENCES public."User" (id) MATCH SIMPLE
//     ON UPDATE CASCADE
//     ON DELETE RESTRICT;

// END;